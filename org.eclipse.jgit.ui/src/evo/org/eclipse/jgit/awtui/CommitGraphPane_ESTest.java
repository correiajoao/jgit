/*
* This file was automatically generated by EvoSuite
* Tue Feb 25 13:08:00 GMT 2020
*/

package org.eclipse.jgit.awtui;

import org.eclipse.jgit.lib.PersonIdent;
import org.eclipse.jgit.revplot.PlotCommit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.*;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CommitGraphPane_ESTest extends CommitGraphPane_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a instância
    *     estática de BasicStroke possui valores iguais aos esperados e não é nula.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        BasicStroke basicStroke0 = (BasicStroke) CommitGraphPane.stroke(4);
        assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
        assertEquals(0, basicStroke0.getLineJoin());
        assertEquals(4.0F, basicStroke0.getLineWidth(), 0.01F);
        assertEquals(2, basicStroke0.getEndCap());
        assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
        assertNotNull(basicStroke0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se as instâncias
    *     de CommitGraphPane, CommitGraphPane.DateCellRender e CommitGraphPane.DateCellRender.getTableCellRendererComponent
    *     possuem os valores iguais aos esperados e não são nulas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.DateCellRender commitGraphPane_DateCellRender0 = new CommitGraphPane.DateCellRender();
        assertTrue(commitGraphPane_DateCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_DateCellRender0.isFocusCycleRoot());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_DateCellRender0.getIgnoreRepaint());
        assertNotNull(commitGraphPane_DateCellRender0);

        CommitGraphPane.DateCellRender commitGraphPane_DateCellRender1 = (CommitGraphPane.DateCellRender) commitGraphPane_DateCellRender0.getTableCellRendererComponent(commitGraphPane0, (Object) null, true, false, 2082, 2082);
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertTrue(commitGraphPane_DateCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_DateCellRender0.isFocusCycleRoot());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_DateCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_DateCellRender1.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_DateCellRender1.getIgnoreRepaint());
        assertFalse(commitGraphPane_DateCellRender1.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane_DateCellRender1.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_DateCellRender1.isFocusCycleRoot());
        assertSame(commitGraphPane_DateCellRender0, commitGraphPane_DateCellRender1);
        assertSame(commitGraphPane_DateCellRender1, commitGraphPane_DateCellRender0);
        assertNotNull(commitGraphPane_DateCellRender1);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se as instâncias
    *     de CommitGraphPane.NameCellRender possuem os valores iguais aos esperados e não são nulas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        CommitGraphPane.NameCellRender commitGraphPane_NameCellRender0 = new CommitGraphPane.NameCellRender();
        assertFalse(commitGraphPane_NameCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_NameCellRender0.isFocusCycleRoot());
        assertTrue(commitGraphPane_NameCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_NameCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_NameCellRender0.getIgnoreRepaint());
        assertNotNull(commitGraphPane_NameCellRender0);

        CommitGraphPane.NameCellRender commitGraphPane_NameCellRender1 = (CommitGraphPane.NameCellRender) commitGraphPane_NameCellRender0.getTableCellRendererComponent((JTable) null, (Object) null, true, false, (-65281), (-1025));
        assertFalse(commitGraphPane_NameCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_NameCellRender0.isFocusCycleRoot());
        assertTrue(commitGraphPane_NameCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_NameCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_NameCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_NameCellRender1.getIgnoreRepaint());
        assertTrue(commitGraphPane_NameCellRender1.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_NameCellRender1.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_NameCellRender1.isFocusCycleRoot());
        assertFalse(commitGraphPane_NameCellRender1.isFocusTraversalPolicyProvider());
        assertSame(commitGraphPane_NameCellRender0, commitGraphPane_NameCellRender1);
        assertSame(commitGraphPane_NameCellRender1, commitGraphPane_NameCellRender0);
        assertNotNull(commitGraphPane_NameCellRender1);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se as instâncias
    *     de CommitGraphPane.NameCellRender possuem os valores iguais aos esperados e não são nulas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertNotNull(commitGraphPane_CommitTableModel0);

        int int0 = commitGraphPane_CommitTableModel0.getColumnCount();
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertEquals(3, int0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste possui muitas duplicações em relação ao anterior.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertNotNull(commitGraphPane_CommitTableModel0);

        PersonIdent personIdent0 = commitGraphPane_CommitTableModel0.authorFor((PlotCommit<SwingCommitList.SwingLane>) null);
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertNull(personIdent0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se as instâncias
    *     de CommitGraphPane e CommitGraphPane.GraphCellRender possuem os valores iguais aos esperados e não são nulas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.GraphCellRender commitGraphPane_GraphCellRender0 = new CommitGraphPane.GraphCellRender();
        assertFalse(commitGraphPane_GraphCellRender0.isFocusCycleRoot());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_GraphCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane_GraphCellRender0.getFocusTraversalKeysEnabled());
        assertNotNull(commitGraphPane_GraphCellRender0);

        CommitGraphPane.GraphCellRender commitGraphPane_GraphCellRender1 = (CommitGraphPane.GraphCellRender) commitGraphPane_GraphCellRender0.getTableCellRendererComponent(commitGraphPane0, (Object) null, false, true, 1, 1);
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusCycleRoot());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_GraphCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane_GraphCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_GraphCellRender1.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_GraphCellRender1.isFocusCycleRoot());
        assertFalse(commitGraphPane_GraphCellRender1.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_GraphCellRender1.getIgnoreRepaint());
        assertTrue(commitGraphPane_GraphCellRender1.getFocusTraversalKeysEnabled());
        assertSame(commitGraphPane_GraphCellRender0, commitGraphPane_GraphCellRender1);
        assertSame(commitGraphPane_GraphCellRender1, commitGraphPane_GraphCellRender0);
        assertNotNull(commitGraphPane_GraphCellRender1);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     chamda ao método CommitGraphPane.stroke() retorna um valor nulo.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Stroke stroke0 = CommitGraphPane.stroke(0);
        assertNull(stroke0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se as instâncias
    *     de CommitGraphPane e TableModel possuem os valores iguais aos esperados e não são nulas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertNotNull(commitGraphPane0);

        TableModel tableModel0 = commitGraphPane0.createDefaultDataModel();
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertEquals(3, tableModel0.getColumnCount());
        assertEquals(0, tableModel0.getRowCount());
        assertNotNull(tableModel0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se as instâncias
    *     de CommitGraphPane e CommitGraphPane.CommitTableModel possuem os valores iguais aos esperados e não são nulas.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertNotNull(commitGraphPane_CommitTableModel0);

        commitGraphPane0.setModel(commitGraphPane_CommitTableModel0);
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método stroke() com valores inválidos lança uma ArrayIndexOutOfBoundsException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test09() throws Throwable {
        // Undeclared exception!
        try {
            CommitGraphPane.stroke((-116));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -116
            //
            verifyException("org.eclipse.jgit.awtui.CommitGraphPane", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a instância de BasicStroke possui os valores iguais aos esperados e não é nula.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        BasicStroke basicStroke0 = (BasicStroke) CommitGraphPane.stroke(2082);
        assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
        assertEquals(2082.0F, basicStroke0.getLineWidth(), 0.01F);
        assertEquals(2, basicStroke0.getEndCap());
        assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
        assertEquals(0, basicStroke0.getLineJoin());
        assertNotNull(basicStroke0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste possui muitas duplicações em relação ao 12 e ao 5.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        CommitGraphPane.GraphCellRender commitGraphPane_GraphCellRender0 = new CommitGraphPane.GraphCellRender();
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane_GraphCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_GraphCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusCycleRoot());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicyProvider());
        assertNotNull(commitGraphPane_GraphCellRender0);

        commitGraphPane_GraphCellRender0.paintComponent((Graphics) null);
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane_GraphCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_GraphCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusCycleRoot());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicyProvider());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método paintComponent() com valores inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        CommitGraphPane.GraphCellRender commitGraphPane_GraphCellRender0 = new CommitGraphPane.GraphCellRender();
        assertTrue(commitGraphPane_GraphCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_GraphCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_GraphCellRender0.isFocusCycleRoot());
        assertNotNull(commitGraphPane_GraphCellRender0);

        DebugGraphics debugGraphics0 = new DebugGraphics();
        assertNotNull(debugGraphics0);

        // Undeclared exception!
        try {
            commitGraphPane_GraphCellRender0.paintComponent(debugGraphics0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("javax.swing.DebugGraphics", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste possui muitas duplicações em relação ao 1.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.DateCellRender commitGraphPane_DateCellRender0 = new CommitGraphPane.DateCellRender();
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_DateCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_DateCellRender0.isFocusCycleRoot());
        assertTrue(commitGraphPane_DateCellRender0.getFocusTraversalKeysEnabled());
        assertNotNull(commitGraphPane_DateCellRender0);

        CommitGraphPane.DateCellRender commitGraphPane_DateCellRender1 = (CommitGraphPane.DateCellRender) commitGraphPane_DateCellRender0.getTableCellRendererComponent(commitGraphPane0, (Object) null, true, true, (-1), 810);
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_DateCellRender0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_DateCellRender0.getIgnoreRepaint());
        assertFalse(commitGraphPane_DateCellRender0.isFocusCycleRoot());
        assertTrue(commitGraphPane_DateCellRender0.getFocusTraversalKeysEnabled());
        assertFalse(commitGraphPane_DateCellRender1.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane_DateCellRender1.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane_DateCellRender1.getIgnoreRepaint());
        assertFalse(commitGraphPane_DateCellRender1.isFocusCycleRoot());
        assertTrue(commitGraphPane_DateCellRender1.getFocusTraversalKeysEnabled());
        assertSame(commitGraphPane_DateCellRender0, commitGraphPane_DateCellRender1);
        assertSame(commitGraphPane_DateCellRender1, commitGraphPane_DateCellRender0);
        assertNotNull(commitGraphPane_DateCellRender1);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste possui muitas duplicações em relação ao 3, 4, 15.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test14() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertNotNull(commitGraphPane_CommitTableModel0);

        Object object0 = commitGraphPane_CommitTableModel0.getValueAt(0, 3395);
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertNull(object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste possui muitas duplicações em relação ao 3, 4, 14.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertNotNull(commitGraphPane0);

        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertNotNull(commitGraphPane_CommitTableModel0);

        Object object0 = commitGraphPane_CommitTableModel0.getValueAt(0, 1);
        assertFalse(commitGraphPane0.isFocusCycleRoot());
        assertFalse(commitGraphPane0.isFocusTraversalPolicyProvider());
        assertFalse(commitGraphPane0.getIgnoreRepaint());
        assertFalse(commitGraphPane0.isFocusTraversalPolicySet());
        assertTrue(commitGraphPane0.getFocusTraversalKeysEnabled());
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
        assertEquals(0, commitGraphPane_CommitTableModel0.getRowCount());
        assertNull(object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método getValueAt() com parâmetros inválidos retorna null.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        Object object0 = commitGraphPane_CommitTableModel0.getValueAt(2564, 2);
        assertNull(object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método getValueAt() com parâmetros inválidos retorna null.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test17() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        Object object0 = commitGraphPane_CommitTableModel0.getValueAt(0, 0);
        assertNull(object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste possui muitas duplicações em relação ao 3, 4, 14, 15.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test18() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        CommitGraphPane.CommitTableModel commitGraphPane_CommitTableModel0 = commitGraphPane0.new CommitTableModel();
        commitGraphPane_CommitTableModel0.getRowCount();
        assertEquals(3, commitGraphPane_CommitTableModel0.getColumnCount());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método setModel() com valores inválidos lança uma ClassCastException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test19() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        Object[][] objectArray0 = new Object[3][1];
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[0]);
        // Undeclared exception!
        try {
            commitGraphPane0.setModel(defaultTableModel0);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // Must be special table model.
            //
            verifyException("org.eclipse.jgit.awtui.CommitGraphPane", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     a chamada ao método setModel() com valores inválidos lança uma IllegalArgumentException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        CommitGraphPane commitGraphPane0 = new CommitGraphPane();
        // Undeclared exception!
        try {
            commitGraphPane0.setModel((TableModel) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Cannot set a null TableModel
            //
            verifyException("javax.swing.JTable", e);
        }
    }

}
