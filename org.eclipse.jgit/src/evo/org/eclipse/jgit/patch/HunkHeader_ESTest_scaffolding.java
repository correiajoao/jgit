/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Feb 25 16:57:48 GMT 2020
 */

package org.eclipse.jgit.patch;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class HunkHeader_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.eclipse.jgit.patch.HunkHeader"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/9c/2fm2fk412pj9zjkzvdx9w2fr0000gn/T/"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/Users/joaocorreia/jgit/org.eclipse.jgit"); 
    java.lang.System.setProperty("user.home", "/Users/joaocorreia"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "joaocorreia"); 
    java.lang.System.setProperty("user.timezone", "America/Sao_Paulo"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(HunkHeader_ESTest_scaffolding.class.getClassLoader() ,
      "org.eclipse.jgit.errors.TranslationBundleException",
      "org.eclipse.jgit.nls.TranslationBundle",
      "org.eclipse.jgit.patch.FileHeader",
      "org.eclipse.jgit.diff.Edit",
      "org.eclipse.jgit.internal.JGitText",
      "org.eclipse.jgit.errors.TranslationStringMissingException",
      "org.eclipse.jgit.lib.MutableObjectId",
      "org.eclipse.jgit.util.TemporaryBuffer$Heap",
      "org.eclipse.jgit.errors.InvalidObjectIdException",
      "org.eclipse.jgit.diff.DiffEntry$Side",
      "org.eclipse.jgit.patch.FormatError$Severity",
      "org.eclipse.jgit.errors.BinaryBlobException",
      "org.eclipse.jgit.diff.Edit$Type",
      "org.eclipse.jgit.nls.NLS",
      "org.eclipse.jgit.patch.CombinedFileHeader",
      "org.eclipse.jgit.lib.AnyObjectId",
      "org.eclipse.jgit.attributes.Attribute",
      "org.eclipse.jgit.treewalk.TreeWalk",
      "org.eclipse.jgit.patch.HunkHeader",
      "org.eclipse.jgit.util.TemporaryBuffer",
      "org.eclipse.jgit.diff.EditList",
      "org.eclipse.jgit.lib.FileMode",
      "org.eclipse.jgit.treewalk.filter.TreeFilter",
      "org.eclipse.jgit.errors.CorruptObjectException",
      "org.eclipse.jgit.attributes.AttributesProvider",
      "org.eclipse.jgit.util.RawParseUtils",
      "org.eclipse.jgit.nls.GlobalBundleCache",
      "org.eclipse.jgit.lib.Constants",
      "org.eclipse.jgit.patch.FileHeader$PatchType",
      "org.eclipse.jgit.patch.HunkHeader$OldImage",
      "org.eclipse.jgit.util.MutableInteger",
      "org.eclipse.jgit.lib.ObjectId",
      "org.eclipse.jgit.diff.DiffEntry$ChangeType",
      "org.eclipse.jgit.patch.Patch",
      "org.eclipse.jgit.lib.AbbreviatedObjectId",
      "org.eclipse.jgit.patch.FormatError",
      "org.eclipse.jgit.patch.HunkHeader$1",
      "org.eclipse.jgit.patch.BinaryHunk",
      "org.eclipse.jgit.diff.DiffEntry",
      "org.eclipse.jgit.diff.DiffEntry$1",
      "org.eclipse.jgit.errors.TranslationBundleLoadingException"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.eclipse.jgit.patch.FileHeader", false, HunkHeader_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.eclipse.jgit.patch.HunkHeader$OldImage", false, HunkHeader_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(HunkHeader_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.eclipse.jgit.patch.HunkHeader",
      "org.eclipse.jgit.patch.HunkHeader$OldImage",
      "org.eclipse.jgit.patch.HunkHeader$1",
      "org.eclipse.jgit.util.RawParseUtils",
      "org.eclipse.jgit.nls.NLS",
      "org.eclipse.jgit.lib.AnyObjectId",
      "org.eclipse.jgit.lib.ObjectId",
      "org.eclipse.jgit.lib.Constants",
      "org.eclipse.jgit.patch.Patch",
      "org.eclipse.jgit.lib.AbbreviatedObjectId",
      "org.eclipse.jgit.diff.DiffEntry",
      "org.eclipse.jgit.patch.FileHeader",
      "org.eclipse.jgit.diff.DiffEntry$ChangeType",
      "org.eclipse.jgit.diff.EditList",
      "org.eclipse.jgit.diff.Edit",
      "org.eclipse.jgit.lib.FileMode$1",
      "org.eclipse.jgit.lib.FileMode$2",
      "org.eclipse.jgit.lib.FileMode$3",
      "org.eclipse.jgit.lib.FileMode$4",
      "org.eclipse.jgit.lib.FileMode$5",
      "org.eclipse.jgit.lib.FileMode$6",
      "org.eclipse.jgit.lib.FileMode",
      "org.eclipse.jgit.util.MutableInteger",
      "org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription",
      "org.eclipse.jgit.events.ListenerList",
      "org.eclipse.jgit.lib.Repository",
      "org.eclipse.jgit.internal.storage.dfs.DfsRepository",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository",
      "org.eclipse.jgit.lib.BaseRepositoryBuilder",
      "org.eclipse.jgit.internal.storage.dfs.DfsRepositoryBuilder",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Builder",
      "org.eclipse.jgit.lib.DefaultTypedConfigGetter",
      "org.eclipse.jgit.lib.Config",
      "org.eclipse.jgit.lib.StoredConfig",
      "org.eclipse.jgit.internal.storage.dfs.DfsConfig",
      "org.eclipse.jgit.lib.ConfigSnapshot",
      "org.eclipse.jgit.lib.ObjectDatabase",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$1",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase",
      "org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions",
      "org.eclipse.jgit.internal.storage.dfs.DfsPackDescription",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource$ComparatorBuilder",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource$PackSourceComparator",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource",
      "org.eclipse.jgit.lib.RefDatabase",
      "org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase",
      "org.eclipse.jgit.internal.storage.dfs.DfsReftableDatabase",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase",
      "org.eclipse.jgit.internal.storage.reftable.ReftableDatabase",
      "org.eclipse.jgit.internal.storage.dfs.DfsReftableDatabase$1",
      "org.eclipse.jgit.lib.MutableObjectId",
      "org.eclipse.jgit.treewalk.TreeWalk",
      "org.eclipse.jgit.lib.ObjectReader",
      "org.eclipse.jgit.internal.storage.dfs.DfsReader",
      "org.eclipse.jgit.internal.storage.dfs.DfsReaderIoStats$Accumulator",
      "org.eclipse.jgit.internal.storage.dfs.DfsRepository$EmptyAttributesNodeProvider",
      "org.eclipse.jgit.attributes.AttributesNode",
      "org.eclipse.jgit.internal.storage.dfs.DfsRepository$EmptyAttributesNodeProvider$EmptyAttributesNode",
      "org.eclipse.jgit.attributes.FilterCommandRegistry",
      "org.eclipse.jgit.treewalk.filter.TreeFilter$AllFilter",
      "org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter",
      "org.eclipse.jgit.treewalk.filter.TreeFilter",
      "org.eclipse.jgit.treewalk.filter.PathFilter",
      "org.eclipse.jgit.treewalk.AbstractTreeIterator",
      "org.eclipse.jgit.treewalk.CanonicalTreeParser",
      "org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig",
      "org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$Ref",
      "org.eclipse.jgit.internal.storage.dfs.DfsStreamKey",
      "org.eclipse.jgit.internal.storage.dfs.DfsStreamKey$ByteArrayDfsStreamKey",
      "org.eclipse.jgit.internal.storage.pack.PackExt",
      "org.eclipse.jgit.internal.storage.dfs.DfsBlockCache",
      "org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackListImpl",
      "org.eclipse.jgit.events.RepositoryEvent",
      "org.eclipse.jgit.internal.storage.dfs.DfsPacksChangedEvent",
      "org.eclipse.jgit.errors.MissingObjectException",
      "org.eclipse.jgit.nls.TranslationBundle",
      "org.eclipse.jgit.internal.JGitText",
      "org.eclipse.jgit.nls.GlobalBundleCache",
      "org.eclipse.jgit.lib.InflaterCache",
      "org.eclipse.jgit.diff.DiffAlgorithm",
      "org.eclipse.jgit.diff.LowLevelDiffAlgorithm",
      "org.eclipse.jgit.diff.HistogramDiff",
      "org.eclipse.jgit.diff.MyersDiff$1",
      "org.eclipse.jgit.diff.MyersDiff",
      "org.eclipse.jgit.diff.SequenceComparator",
      "org.eclipse.jgit.diff.HashedSequencePair",
      "org.eclipse.jgit.diff.HashedSequenceComparator",
      "org.eclipse.jgit.diff.Sequence",
      "org.eclipse.jgit.diff.HashedSequence",
      "org.eclipse.jgit.diff.Subsequence",
      "org.eclipse.jgit.diff.DiffEntry$1",
      "org.eclipse.jgit.util.FS$FSFactory",
      "org.eclipse.jgit.util.SystemReader$Default",
      "org.eclipse.jgit.lib.ObjectChecker",
      "org.eclipse.jgit.lib.ObjectChecker$ErrorType",
      "org.eclipse.jgit.util.SystemReader",
      "org.eclipse.jgit.util.FS_POSIX",
      "org.eclipse.jgit.util.FS_POSIX$AtomicFileCreation",
      "org.eclipse.jgit.util.FS",
      "org.eclipse.jgit.util.FS_Win32",
      "org.eclipse.jgit.util.FS_Win32_Cygwin",
      "org.eclipse.jgit.patch.BinaryHunk",
      "org.eclipse.jgit.diff.Edit$Type",
      "org.eclipse.jgit.diff.DiffAlgorithm$1",
      "org.eclipse.jgit.util.IntList",
      "org.eclipse.jgit.diff.RawText",
      "org.eclipse.jgit.lib.ObjectLoader",
      "org.eclipse.jgit.lib.ObjectLoader$SmallObject",
      "org.eclipse.jgit.errors.BinaryBlobException",
      "org.eclipse.jgit.util.TemporaryBuffer",
      "org.eclipse.jgit.util.TemporaryBuffer$Heap",
      "org.eclipse.jgit.util.TemporaryBuffer$Block",
      "org.eclipse.jgit.lib.CommitBuilder",
      "org.eclipse.jgit.errors.InvalidObjectIdException",
      "org.eclipse.jgit.internal.storage.file.FileRepository",
      "org.eclipse.jgit.diff.HistogramDiff$State",
      "org.eclipse.jgit.diff.HistogramDiffIndex",
      "org.eclipse.jgit.internal.storage.reftable.Reftable",
      "org.eclipse.jgit.internal.storage.reftable.MergedReftable",
      "org.eclipse.jgit.internal.storage.dfs.DfsReftableStack",
      "org.eclipse.jgit.internal.storage.reftable.RefCursor",
      "org.eclipse.jgit.internal.storage.reftable.MergedReftable$MergedRefCursor",
      "org.eclipse.jgit.util.RefList$Builder",
      "org.eclipse.jgit.util.RefMap",
      "org.eclipse.jgit.util.RefList",
      "org.eclipse.jgit.util.RefMap$1",
      "org.eclipse.jgit.util.RefMap$SetIterator",
      "org.eclipse.jgit.storage.file.FileRepositoryBuilder",
      "org.eclipse.jgit.storage.file.FileBasedConfig",
      "org.eclipse.jgit.util.SimpleLruCache",
      "org.eclipse.jgit.util.FS$FileStoreAttributes",
      "org.eclipse.jgit.internal.storage.file.FileSnapshot$1",
      "org.eclipse.jgit.internal.storage.file.FileSnapshot",
      "org.eclipse.jgit.util.FileUtils",
      "org.eclipse.jgit.util.IO",
      "org.eclipse.jgit.util.io.SilentFileInputStream",
      "org.eclipse.jgit.util.NB",
      "org.eclipse.jgit.lib.ConfigSnapshot$LineComparator",
      "org.eclipse.jgit.util.StringUtils",
      "org.eclipse.jgit.util.FS$Holder",
      "org.eclipse.jgit.lib.ObjectInserter",
      "org.eclipse.jgit.lib.ObjectInserter$Formatter",
      "org.eclipse.jgit.util.sha1.SHA1",
      "org.eclipse.jgit.util.sha1.SHA1$State",
      "org.eclipse.jgit.patch.FormatError",
      "org.eclipse.jgit.treewalk.WorkingTreeOptions",
      "org.eclipse.jgit.treewalk.WorkingTreeIterator",
      "org.eclipse.jgit.treewalk.FileTreeIterator",
      "org.eclipse.jgit.treewalk.FileTreeIterator$DefaultFileModeStrategy",
      "org.eclipse.jgit.treewalk.InstantComparator",
      "org.eclipse.jgit.treewalk.WorkingTreeIterator$IteratorState",
      "org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter",
      "org.eclipse.jgit.api.GitCommand",
      "org.eclipse.jgit.api.TransportCommand",
      "org.eclipse.jgit.api.SubmoduleAddCommand",
      "org.eclipse.jgit.transport.CredentialsProvider",
      "org.eclipse.jgit.lib.ObjectIdRef",
      "org.eclipse.jgit.lib.ObjectIdRef$Unpeeled",
      "org.eclipse.jgit.lib.RefUpdate",
      "org.eclipse.jgit.internal.storage.dfs.DfsRefUpdate",
      "org.eclipse.jgit.lib.RefUpdate$Result",
      "org.eclipse.jgit.lib.BatchingProgressMonitor",
      "org.eclipse.jgit.lib.TextProgressMonitor",
      "org.eclipse.jgit.lib.RebaseTodoFile",
      "org.eclipse.jgit.revwalk.RevWalk",
      "org.eclipse.jgit.revwalk.ObjectWalk$1",
      "org.eclipse.jgit.revwalk.ObjectWalk",
      "org.eclipse.jgit.lib.RefRename",
      "org.eclipse.jgit.internal.storage.dfs.DfsRefRename",
      "org.eclipse.jgit.errors.NoWorkTreeException",
      "org.eclipse.jgit.api.StashDropCommand",
      "org.eclipse.jgit.events.ConfigChangedEvent",
      "org.eclipse.jgit.lib.ObjectIdOwnerMap",
      "org.eclipse.jgit.revwalk.Generator",
      "org.eclipse.jgit.revwalk.AbstractRevQueue$AlwaysEmptyQueue",
      "org.eclipse.jgit.revwalk.AbstractRevQueue",
      "org.eclipse.jgit.revwalk.DateRevQueue",
      "org.eclipse.jgit.revwalk.StartGenerator",
      "org.eclipse.jgit.revwalk.RevSort",
      "org.eclipse.jgit.revwalk.filter.RevFilter$AllFilter",
      "org.eclipse.jgit.revwalk.filter.RevFilter$NoneFilter",
      "org.eclipse.jgit.revwalk.filter.RevFilter$OnlyMergesFilter",
      "org.eclipse.jgit.revwalk.filter.RevFilter$NoMergesFilter",
      "org.eclipse.jgit.revwalk.filter.RevFilter$MergeBaseFilter",
      "org.eclipse.jgit.revwalk.filter.RevFilter",
      "org.eclipse.jgit.revwalk.BlockObjQueue",
      "org.eclipse.jgit.revwalk.BlockObjQueue$BlockFreeList",
      "org.eclipse.jgit.revwalk.filter.ObjectFilter$AllFilter",
      "org.eclipse.jgit.revwalk.filter.ObjectFilter",
      "org.eclipse.jgit.api.AddCommand",
      "org.eclipse.jgit.treewalk.filter.IndexDiffFilter",
      "org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry",
      "org.eclipse.jgit.revwalk.RevObject",
      "org.eclipse.jgit.revwalk.RevCommit",
      "org.eclipse.jgit.util.sha1.UbcCheck$DvInfo",
      "org.eclipse.jgit.util.sha1.UbcCheck",
      "org.eclipse.jgit.lib.SymbolicRef",
      "org.eclipse.jgit.transport.ReceiveCommand",
      "org.eclipse.jgit.transport.ReceiveCommand$Result",
      "org.eclipse.jgit.transport.ReceiveCommand$Type",
      "org.eclipse.jgit.lib.BatchRefUpdate",
      "org.eclipse.jgit.internal.storage.reftable.ReftableBatchRefUpdate",
      "org.eclipse.jgit.internal.storage.dfs.DfsReftableBatchRefUpdate",
      "org.eclipse.jgit.lib.NullProgressMonitor",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemPack",
      "org.eclipse.jgit.internal.storage.dfs.DfsOutputStream",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out",
      "org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase$1",
      "org.eclipse.jgit.internal.storage.reftable.ReftableConfig",
      "org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor",
      "org.eclipse.jgit.internal.storage.reftable.ReftableWriter",
      "org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream",
      "org.eclipse.jgit.util.io.CountingOutputStream",
      "org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section",
      "org.eclipse.jgit.internal.storage.reftable.ReftableWriter$IndexBuilder",
      "org.eclipse.jgit.internal.storage.reftable.ReftableConstants",
      "org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry",
      "org.eclipse.jgit.internal.storage.reftable.BlockWriter$RefEntry",
      "org.eclipse.jgit.internal.storage.reftable.BlockWriter",
      "org.eclipse.jgit.internal.storage.reftable.BlockWriter$IndexEntry",
      "org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Stats",
      "org.eclipse.jgit.internal.storage.dfs.BlockBasedFile",
      "org.eclipse.jgit.internal.storage.dfs.DfsReftable",
      "org.eclipse.jgit.internal.storage.dfs.DfsReftableDatabase$2",
      "org.eclipse.jgit.patch.FileHeader$PatchType",
      "org.eclipse.jgit.patch.FormatError$Severity"
    );
  }
}
